##################main.py############################

from src.apiservice.run import app


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8003)

##############################################

####################config.py##########################

import os
from flask import Flask
import sqlalchemy
import psycopg2
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager

# the location and env are declared in config.py
ENV = "DEV"
LOCATION = "LOCAL"


app = Flask(__name__)
app.config['ENV'] = ENV
app.config['LOCATION'] = LOCATION
db.app = app
app.app_context().push()
db.init_app(app)
app.config['SECURITY_PASSWORD_SALT'] = 'secretmail'
app.config['JWT_BLACKLIST_ENABLED'] = False
app.config['JWT_BLACKLIST_TOKEN_CHECKS'] = ['access', 'refresh']
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = 7200  # In Seconds; 7200 seconds = 2 hours
app.config['MAIL_EXPIRY'] = 3600  # In Seconds
app.config['LOCK_PERIOD'] = 3
app.config['SECRET_KEY'] = 'Thisissupposedtobesecret!'
os.environ['ENV'] = app.config['ENV']
os.environ['LOCATION'] = app.config['LOCATION']
app.config['MAIL_SERVER'] = '172.20.170.113'
app.config['MAIL_PORT'] = 25
jwt = JWTManager(app)
email = Mail(app)

########################################################

#########################run.py###############################

from src.config import app
from src.apiservice.controllers import customer_controllers as customer_controller

app.register_blueprint(customer_controller.customer_api, url_prefix='/api/v1/customer')

#######################################################

########################controller.py###############################


import os, traceback
from flask import Blueprint, jsonify, request
from configparser import ConfigParser
from src.models.configdetails_modelling import ConfigDetail
from src.core.logger.app_log import Log4j

env = os.getenv('ENV')
location = os.getenv('LOCATION')
config_api = Blueprint('config_api', __name__)
c = ConfigDetail()

"""
         Controller for Config Details API
"""


@config_api.route('/get_all_ds_configurations', methods=['POST'])
def get_all_ds_configurations():
    """
        Method to retrieve config details.
        Args : user_id
        Tables used : config_details, kmeans_model_details, users
        Returns : JSON output of the data.
    """
    try:
        request_data = request.get_json(force=True)
        logger.info("API : get_all_ds_configurations .......................")
        user_id = request_data['user_id']
        logger.info("user_id : %s " % user_id)
        status, data, user_details = c.get_all_ds_configurations(user_id)
        if status == "Success":
            return jsonify({
                "user_details": user_details,
                "config_details": data,
                "status": status
            }), 200
        elif status == "Failed":
            return jsonify({
                "status": status,
                "message": "Failed to fetch records"
            }), 400

    except Exception:
        logger.error("Error occurred in API : get_all_ds_configurations : %s" % traceback.format_exc())
        response = {
            'status': "Failed",
            'message': "JSON structure is incorrect"
        }
        return response, 400


@config_api.route('/save_duration_date_range', methods=['POST'])
def save_duration_date_range():
    """
        Method to save config details to the table.
        Args : user_id, config_details
        Tables used : config_details
        Returns : JSON output as success or failure.
    """

    try:
        request_data = request.get_json(force=True)
        logger.info("API : save_duration_date_range .......................")
        user_id = request_data['user_id']
        array_val = request_data['config_details']
        logger.info("user_id : %s " % user_id)
        status, message, code, config_id = c.save_duration_date_range(array_val, user_id)
        if status == "Success":
            return jsonify({
                "status": status,
                "message": message,
                "config_id": config_id
            }), code
        elif status == "Failed":
            return jsonify({
                "status": status,
                "message": message
            }), code
    except Exception:
        logger.error("Error occurred in API : save_duration_date_range : %s" % traceback.format_exc())
        response = {
            'status': "Failed",
            'message': "JSON structure is incorrect"
        }
        return response, 400

#############################################################